name: Build, Version, and Release Extension

on:
  workflow_dispatch:
  push:
    branches:
      - main  # trigger on main pushes

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # 1️⃣ Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: false

      # 3️⃣ Install dependencies
      - name: Install dependencies
        run: npm ci

      # 4️⃣ Bump version automatically
      - name: Bump version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Strip 'v' prefix
          VERSION=${LATEST_TAG#v}
          
          # Increment patch version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          echo "New version: $NEW_VERSION"
          
          # Export for later steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # 5️⃣ Commit new version and tag
      - name: Commit version and create tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag v$NEW_VERSION
          git push origin main --tags

      # 6️⃣ Build the extension
      - name: Build extension
        run: npm run build

      # 7️⃣ Zip the build
      - name: Package extension
        run: |
          cd dist
          zip -r ../icony.zip .

      # 8️⃣ Generate changelog
      - name: Generate changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"* %s" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 9️⃣ Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: icony.zip
          name: v${{ env.NEW_VERSION }}
          body: |
            Release v${{ env.NEW_VERSION }}
            
            Changelog:
            ${{ env.CHANGELOG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
